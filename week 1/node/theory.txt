1. HTTP Methods
<----------------------------------------------------------------------------------------------------------------------------------------------->
HTTP defines a set of request methods to indicate the desired action to be performed for a given resource. Although they can also be nouns, these request methods are sometimes referred as HTTP verbs. Each of them implements a different semantic, but some common features are shared by a group of them: e.g. a request method can be safe, idempotent, or cacheable.
-->GET
The GET method is used to retrieve information from the given server using a given URI. Requests using GET should only retrieve data and should have no other effect on the data.
-->HEAD
The HEAD method asks for a response identical to that of a GET request, but without the response body.
-->POST
A POST request is used to send data to the server, for example, customer information, file upload, etc.
-->PUT
The PUT method replaces all current representations of the target resource with the uploaded content.
-->DELETE
The DELETE method removes all current representations of the target resource given by a URI.
-->CONNECT
The CONNECT method establishes a tunnel to the server identified by a given URI.
-->OPTIONS
The OPTIONS method is used to describe the communication options for the target resource.
-->TRACE
The TRACE method performs a message loop-back test along the path to the target resource.
-->PATCH
The PATCH method is used to apply partial modifications to a resource.

13. Synchronous Vs Asynchronous Programming
<----------------------------------------------------------------------------------------------------------------------------------------------->
-->In Synchronous program execution, program starts at the first line of source code and each line of code executed sequentially thereafter. Each time a function is called, program execution waits until that function returns before continuing to the next line of code.
-->Suppose a function is called to start a time consuming process. With synchronous programming, your program is “stuck,” waiting for the process to end, with no way out.
-->Using Asynchronous programming, the program will not wait until the function executes. In single thread environment, thread once starts executing a task it can hold it in mid, save the current state and start executing another task. In multi-thread environment, all the threads can work in asynchronous model as well.
-->Asynchronous programming model ensures non-blocking code execution.
-->JavaScript is asynchronous in nature and so is NodeJS.

16. libuv
<----------------------------------------------------------------------------------------------------------------------------------------------->
-->libuv is cross-platform support library which was originally written for NodeJS. It’s designed around the event-driven asynchronous I/O model.
-->The library provides much more than a simple abstraction over different I/O polling mechanisms: ‘handles’ and ‘streams’ provide a high level abstraction for sockets and other entities; cross-platform file I/O and threading functionality is also provided, amongst other things.

17. V8 Engine
<----------------------------------------------------------------------------------------------------------------------------------------------->
-->A Javascript Engine is a program that converts Javascript code into lower level or machine code that microprocessors can understand.
-->V8 is a powerful open source Javascript engine provided by Google.
-->The Chrome V8 engine :
	-->The V8 engine is written in C++ and used in Chrome and Nodejs.
	-->It implements ECMAScript as specified in ECMA-262.
	-->The V8 engine can run standalone and we can embed it with our own C++ program.
-->Allowing us to write code in C++ and making it available to JavaScript makes it possible to add more features to JavaScript. Node.js in itself is a C++ implementation of a V8 engine allowing server side programming and networking applications.




